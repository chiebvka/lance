-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.audit_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  tableName text,
  recordId uuid,
  createdBy uuid,
  organizationId uuid,
  action text,
  oldData jsonb,
  newData jsonb,
  changeSummary jsonb,
  changedOn timestamp with time zone DEFAULT now(),
  CONSTRAINT audit_log_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.banks (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updatedAt timestamp with time zone,
  createdBy uuid DEFAULT auth.uid(),
  organizationId uuid,
  accountName text,
  accountNumber text,
  routingNumber text,
  institutionNumber text,
  transitNumber text,
  iban text,
  swiftCode text,
  sortCode text,
  bankName text,
  bankAddress text,
  country text,
  currency text,
  isDefault boolean,
  stripePaymentLink text,
  paypalPaymentLink text,
  CONSTRAINT banks_pkey PRIMARY KEY (id),
  CONSTRAINT banks_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.customer_activities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  amount numeric,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  customerId uuid,
  details jsonb,
  label text,
  referenceId uuid,
  referenceType USER-DEFINED,
  tagColor text,
  type USER-DEFINED,
  CONSTRAINT customer_activities_pkey PRIMARY KEY (id),
  CONSTRAINT customer_activities_customerId_fkey FOREIGN KEY (customerId) REFERENCES public.customers(id),
  CONSTRAINT customer_activities_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id)
);
CREATE TABLE public.customers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  address text,
  addressLine1 text,
  addressLine2 text,
  city text,
  contactPerson text,
  country text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  email text,
  fullAddress text,
  name text,
  notes text,
  organizationId uuid,
  phone text,
  postalCode text,
  state text,
  taxId text,
  unitNumber text,
  updated_at timestamp with time zone,
  website text,
  invoiceCount numeric,
  receiptCount numeric,
  projectCount numeric,
  feedbackCount numeric,
  linkCount numeric,
  fts tsvector DEFAULT to_tsvector('simple'::regconfig, ((((name || ' '::text) || COALESCE(email, ''::text)) || ' '::text) || COALESCE(phone, ''::text))),
  CONSTRAINT customers_pkey PRIMARY KEY (id),
  CONSTRAINT customers_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id),
  CONSTRAINT customers_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id)
);
CREATE TABLE public.deliverables (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  description text,
  dueDate timestamp with time zone,
  isPublished boolean,
  lastSaved timestamp with time zone,
  name text,
  position integer,
  projectId uuid,
  status text,
  updatedAt timestamp with time zone,
  CONSTRAINT deliverables_pkey PRIMARY KEY (id),
  CONSTRAINT deliverables_projectId_fkey FOREIGN KEY (projectId) REFERENCES public.projects(id),
  CONSTRAINT deliverables_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id)
);
CREATE TABLE public.feedback_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  createdBy uuid DEFAULT auth.uid(),
  questions jsonb,
  isDefault boolean,
  name text,
  organizationId uuid,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_templates_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_templates_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.feedbacks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  customerId uuid,
  createdBy uuid DEFAULT auth.uid(),
  projectId uuid,
  templateId uuid,
  filledOn timestamp with time zone,
  questions jsonb,
  answers jsonb,
  state text,
  fts tsvector DEFAULT to_tsvector('simple'::regconfig, (((questions ->> 'title'::text) || ' '::text) || COALESCE(state, ''::text))),
  dueDate timestamp with time zone,
  sentAt timestamp with time zone,
  recepientEmail text,
  name text,
  message text,
  updated_at timestamp with time zone,
  recepientName text,
  token uuid,
  organizationName text,
  organizationLogoUrl text,
  organizationEmail text,
  organizationId uuid,
  CONSTRAINT feedbacks_pkey PRIMARY KEY (id),
  CONSTRAINT feedbacks_customerId_fkey FOREIGN KEY (customerId) REFERENCES public.customers(id),
  CONSTRAINT feedbacks_projectId_fkey FOREIGN KEY (projectId) REFERENCES public.projects(id),
  CONSTRAINT feedbacks_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.invoices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  currency text,
  customerId uuid,
  dueDate timestamp with time zone,
  emailSentAt timestamp with time zone,
  invoiceDetails jsonb,
  invoiceNumber text,
  issueDate timestamp with time zone,
  notes text,
  paymentDetails jsonb,
  paymentLink text,
  paymentType text,
  projectId uuid,
  sentViaEmail boolean,
  status text,
  subTotalAmount numeric,
  taxRate numeric,
  totalAmount numeric,
  updatedAt timestamp with time zone,
  vatRate numeric,
  paidOn timestamp with time zone,
  fts tsvector DEFAULT to_tsvector('simple'::regconfig, (("invoiceNumber" || ' '::text) || COALESCE(status, ''::text))),
  recepientName text,
  recepientEmail text,
  state text,
  organizationId uuid,
  CONSTRAINT invoices_pkey PRIMARY KEY (id),
  CONSTRAINT invoices_projectid_fkey FOREIGN KEY (projectId) REFERENCES public.projects(id),
  CONSTRAINT invoices_customerId_fkey FOREIGN KEY (customerId) REFERENCES public.customers(id),
  CONSTRAINT invoices_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id),
  CONSTRAINT invoices_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  organizationId uuid,
  addedBy uuid DEFAULT gen_random_uuid(),
  email text,
  roles text,
  paidSub boolean,
  author text,
  CONSTRAINT members_pkey PRIMARY KEY (id),
  CONSTRAINT members_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organizationId uuid,
  userId uuid,
  title text NOT NULL,
  message text,
  type text NOT NULL DEFAULT 'info'::text,
  isread boolean DEFAULT false,
  actionurl text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  expiresat timestamp with time zone,
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.organization (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  baseCurrency text,
  country text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  email text,
  logoUrl text,
  name text,
  updated_at timestamp with time zone,
  fts tsvector DEFAULT to_tsvector('english'::regconfig, ((((name || ' '::text) || COALESCE("baseCurrency", ''::text)) || ' '::text) || COALESCE(email, ''::text))),
  taxId text,
  phone text,
  website text,
  addressLine1 text,
  addressLine2 text,
  city text,
  state text,
  postal text,
  accountNumber text,
  bankName text,
  subscriptionId text,
  subscriptionStatus text,
  trialEndsAt timestamp without time zone,
  setupStatus text,
  setupCompletedAt timestamp with time zone,
  setupCompletedBy uuid DEFAULT auth.uid(),
  setupData jsonb,
  planType USER-DEFINED,
  billingCycle USER-DEFINED,
  subscriptionStartDate timestamp with time zone,
  subscriptionEndDate timestamp with time zone,
  billingEmail text,
  paymentMethodId text,
  stripeMetadata jsonb DEFAULT '{}'::jsonb,
  subscriptionMetadata jsonb DEFAULT '{}'::jsonb,
  subscriptionstatus USER-DEFINED DEFAULT 'trial'::subscription_status_enum,
  CONSTRAINT organization_pkey PRIMARY KEY (id),
  CONSTRAINT organization_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id)
);
CREATE TABLE public.paymentTerms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  amount numeric,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  deliverableId uuid,
  description text,
  dueDate timestamp with time zone,
  hasPaymentTerms boolean,
  name text,
  percentage numeric,
  projectId uuid,
  status text,
  type text,
  updatedAt timestamp with time zone,
  organizationId uuid,
  CONSTRAINT paymentTerms_pkey PRIMARY KEY (id),
  CONSTRAINT paymentTerms_projectId_fkey FOREIGN KEY (projectId) REFERENCES public.projects(id),
  CONSTRAINT paymentTerms_deliverableId_fkey FOREIGN KEY (deliverableId) REFERENCES public.deliverables(id),
  CONSTRAINT paymentTerms_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id),
  CONSTRAINT paymentTerms_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.pricing (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  stripePriceId text NOT NULL UNIQUE,
  productId uuid,
  stripeProductId text NOT NULL,
  currency text NOT NULL DEFAULT 'usd'::text,
  unitAmount integer NOT NULL,
  billingCycle text CHECK ("billingCycle" = ANY (ARRAY['monthly'::text, 'yearly'::text])),
  isActive boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT pricing_pkey PRIMARY KEY (id),
  CONSTRAINT pricing_productid_fkey FOREIGN KEY (productId) REFERENCES public.products(id)
);
CREATE TABLE public.products (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  stripeProductId text NOT NULL UNIQUE,
  name text NOT NULL,
  description text,
  metadata jsonb DEFAULT '{}'::jsonb,
  isActive boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT products_pkey PRIMARY KEY (id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  profile_id uuid UNIQUE,
  email text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  organizationId uuid,
  organizationRole text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES auth.users(id),
  CONSTRAINT profiles_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.projects (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  budget numeric,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  currency text,
  currencyEnabled boolean,
  customerId uuid,
  customFields jsonb,
  deliverables jsonb,
  deliverablesEnabled boolean,
  description text,
  documents jsonb,
  effectiveDate timestamp with time zone,
  emailToCustomer boolean,
  endDate timestamp with time zone,
  hasAgreedToTerms boolean,
  hasPaymentTerms boolean,
  hasServiceAgreement boolean,
  isArchived boolean,
  isPublished boolean,
  name text,
  notes text,
  paymentMilestones jsonb,
  paymentStructure text,
  projectTypeId uuid,
  serviceAgreement jsonb,
  signedOn timestamp with time zone,
  signedStatus text,
  startDate timestamp with time zone,
  state text,
  status text,
  type text,
  updatedOn timestamp with time zone,
  agreementTemplate text,
  fts tsvector DEFAULT to_tsvector('simple'::regconfig, ((name || ' '::text) || COALESCE(description, ''::text))),
  organizationId uuid,
  CONSTRAINT projects_pkey PRIMARY KEY (id),
  CONSTRAINT projects_customerId_fkey FOREIGN KEY (customerId) REFERENCES public.customers(id),
  CONSTRAINT projects_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id),
  CONSTRAINT projects_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.receipts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  createdBy uuid,
  creationMethod text,
  currency text,
  customerId uuid,
  dueDate timestamp with time zone,
  emailSentAt timestamp with time zone,
  invoiceId uuid,
  issueDate timestamp with time zone,
  notes text,
  paymentConfirmedat timestamp with time zone,
  paymentDetails jsonb,
  paymentLink text,
  paymentType text,
  projectId uuid,
  receiptDetails jsonb,
  receiptNumber text,
  sentViaEmail boolean,
  status text,
  subTotalAmount numeric,
  taxAmount numeric,
  totalamount numeric,
  updatedAt timestamp with time zone,
  vatRate numeric,
  fts tsvector DEFAULT to_tsvector('simple'::regconfig, (("receiptNumber" || ' '::text) || COALESCE(status, ''::text))),
  recepientName text,
  recepientEmail text,
  issuedBy text,
  organizationId uuid,
  CONSTRAINT receipts_pkey PRIMARY KEY (id),
  CONSTRAINT receipts_projectId_fkey FOREIGN KEY (projectId) REFERENCES public.projects(id),
  CONSTRAINT receipts_invoiceId_fkey FOREIGN KEY (invoiceId) REFERENCES public.invoices(id),
  CONSTRAINT receipts_customerId_fkey FOREIGN KEY (customerId) REFERENCES public.customers(id),
  CONSTRAINT receipts_createdBy_fkey FOREIGN KEY (createdBy) REFERENCES public.profiles(profile_id),
  CONSTRAINT receipts_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.subscriptions (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  organizationId uuid,
  createdBy uuid DEFAULT auth.uid(),
  stripeCustomerId text,
  stripeSubscriptionId text,
  startsAt date,
  endsAt date,
  paymentMethod json,
  amount numeric,
  currency text,
  updatedAt timestamp with time zone,
  planType USER-DEFINED,
  billingCycle USER-DEFINED,
  stripeMetadata jsonb DEFAULT '{}'::jsonb,
  subscriptionStatus USER-DEFINED DEFAULT 'pending'::subscription_status_enum,
  CONSTRAINT subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT subscriptions_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);
CREATE TABLE public.vault (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  tableTpye text,
  typeId uuid,
  createdBy uuid DEFAULT auth.uid(),
  bucketUrl text,
  projectId uuid,
  customerId uuid,
  feedbackId uuid,
  invoiceId uuid,
  rceeiptId uuid,
  lnikId uuid,
  CONSTRAINT vault_pkey PRIMARY KEY (id)
);
CREATE TABLE public.wallet (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  createdBy uuid DEFAULT auth.uid(),
  organizationId uuid,
  walletName text,
  crypto text,
  walletAddress text,
  isDefault boolean,
  updatedAt timestamp with time zone,
  CONSTRAINT wallet_pkey PRIMARY KEY (id),
  CONSTRAINT wallet_organizationId_fkey FOREIGN KEY (organizationId) REFERENCES public.organization(id)
);