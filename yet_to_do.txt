general
- Change the layout colors for the light and dark mode
- Try to style tables better
- Change sheet on desktop to shadcn drawers for mobile
- 

Projects
- Fix issue that causes duplicate whenever we try to update an existing Project
- Fix width of sheet for Projects
- Ensure that every project is tied to an organization and whoever is creating teh project has teh right authorization level to do so as well as having the organization subscription state  

Customers
- Ensure that every customer is tied to an organization
- Whoever is creating the customer is tied to said organization and they have the right authorization level to do so
- 

Search functionality
- Ensure teh global search is rather tied to an organization instead of a user 





Invoice
- 


Feedback
- Change the data content fits the toast div for generating zip file
- Allow for editing the file 
- Add the preview form action to the feedback table 
- Allow for the system to automatically change the state to overdue when the date passes locally
- Figure out how to handle RLS for the table in question as it is currently disbaled 
- Add a small block in teh form detail sheet to preview the forms 
- Confirm the card info 
- Finish the edit form page and allow for uppdates on forms not cancelled






Organization
- User fills signup form (email, password, etc.) ✅
- After successful auth, show organization setup form ✅
- Create organization with provided name ✅
- Link user to organization ✅
- Start 7-day trial
- Redirect to dashboard with full access




ALTER TABLE organization 
ADD COLUMN subscription_status TEXT DEFAULT 'trial',
ADD COLUMN trial_ends_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN subscription_plan TEXT,
ADD COLUMN subscription_ends_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN stripe_customer_id TEXT,
ADD COLUMN stripe_subscription_id TEXT; 







Links
- A live link for your clients that sort of acts like a blog post with every instruction you migth want to leave with them 






Update list
Feedbacks
- Brand filled out form preview page with the organization name and logo once filled out 
- Add api to let the user see the state of each crytpo shared to the usd equivalence 
- When trying to resend email for a feedback form reset the calendar due date on popup 
- 


Organization & subscription
- Go back to middleware to handle state for pending within a time frame to at least make state move from pending to either active, cancelled or suspended 



Links
- When working with the expiry date for the link compare it with the users/organizations subscription start date and tie teh link being active to that 
- 




  sub flow
  - enhance middleware protection  
  - create subscription state management
  - setup pricing page (should have this and teh option above and below it tied to stripe so that chnages to pricing/name from stripe dashboard reflects)
  - create webhook Handler
  - test complete flow


Clean up checks
- Clean up feedback form to make sure it is tied to organization as well as organization notification setting for updates 
- Clean project bugs, allow for customer sign off and tie notification to signedStatus state of overdue
- After finishing invoice, project and feedback table clean up ensure that the notification is tied to organization setting 


















  "use client";

import { useEffect, useState } from 'react';
import { createClient } from '@/utils/supabase/client';
import { Database } from '@/types/supabase';

// Create a partial type for the organization fields we actually need
type OrganizationSubscription = Pick<
  Database["public"]["Tables"]["organization"]["Row"],
  | "id"
  | "name"
  | "subscriptionStatus"
  | "trialEndsAt"
  | "planType"
  | "billingCycle"
  | "subscriptionStartDate"
  | "subscriptionEndDate"
  | "stripeMetadata"
  | "subscriptionMetadata"
>;

type SubscriptionStatus = Database["public"]["Enums"]["subscription_status_enum"];

interface SubscriptionState {
  organization: OrganizationSubscription | null;
  isLoading: boolean;
  error: string | null;
  hasActiveSubscription: boolean;
  trialDaysRemaining: number;
  isTrialExpiringSoon: boolean;
}

export function useSubscription() {
  const [state, setState] = useState<SubscriptionState>({
    organization: null,
    isLoading: true,
    error: null,
    hasActiveSubscription: false,
    trialDaysRemaining: 0,
    isTrialExpiringSoon: false,
  });

  const supabase = createClient();

  useEffect(() => {
    async function loadSubscription() {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
          setState(prev => ({ ...prev, isLoading: false }));
          return;
        }

        // Get user profile
        const { data: userProfile } = await supabase
          .from("profiles")
          .select("organizationId")
          .eq("profile_id", user.id)
          .single();

        if (!userProfile?.organizationId) {
          setState(prev => ({ ...prev, isLoading: false }));
          return;
        }

        // Get organization details
        const { data: organization } = await supabase
          .from("organization")
          .select(`
            id,
            name,
            subscriptionStatus,
            trialEndsAt,
            planType,
            billingCycle,
            subscriptionStartDate,
            subscriptionEndDate,
            stripeMetadata,
            subscriptionMetadata
          `)
          .eq("id", userProfile.organizationId)
          .single();

        if (!organization) {
          setState(prev => ({ ...prev, isLoading: false }));
          return;
        }

        // Calculate subscription state
        const validStatuses: SubscriptionStatus[] = ['active', 'trial'];
        const hasActiveSubscription = validStatuses.includes(organization.subscriptionStatus || 'trial');

        // Calculate trial days remaining
        let trialDaysRemaining = 0;
        if (organization.subscriptionStatus === 'trial' && organization.trialEndsAt) {
          const trialEndDate = new Date(organization.trialEndsAt);
          const now = new Date();
          const diffTime = trialEndDate.getTime() - now.getTime();
          trialDaysRemaining = Math.max(0, Math.ceil(diffTime / (1000 * 60 * 60 * 24)));
        }

        const isTrialExpiringSoon = trialDaysRemaining <= 3 && trialDaysRemaining > 0;

        setState({
          organization,
          isLoading: false,
          error: null,
          hasActiveSubscription,
          trialDaysRemaining,
          isTrialExpiringSoon,
        });

      } catch (error) {
        console.error('Error loading subscription:', error);
        setState(prev => ({
          ...prev,
          isLoading: false,
          error: 'Failed to load subscription data',
        }));
      }
    }

    loadSubscription();
  }, []);

  return state;
} 